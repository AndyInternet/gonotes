// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Notes", testNotes)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("Notes", testNotesDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Notes", testNotesQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Notes", testNotesSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Notes", testNotesExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Notes", testNotesFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Notes", testNotesBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Notes", testNotesOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Notes", testNotesAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Notes", testNotesCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Notes", testNotesHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Notes", testNotesInsert)
	t.Run("Notes", testNotesInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Notes", testNotesReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Notes", testNotesReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Notes", testNotesSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Notes", testNotesUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Notes", testNotesSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
